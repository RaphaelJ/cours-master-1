/*
 * INFO0045: Assignment 1
 *
 * AuthorityServer.java 
 */

package info0045;

import java.io.*;
import java.util.*;
import java.net.*;
import java.awt.*;
import java.awt.event.*;
import java.lang.String;


import java.security.*;
import java.security.spec.*;
import java.security.interfaces.*;

import javax.crypto.*;
import javax.crypto.spec.*;
import javax.crypto.interfaces.*;

public class AuthorityServer
{
    /**
     *  Socket used by the server.
     */
    private ServerSocket server_socket;

    /**
     * The master keys used to decipher the password file and user received
     * keys.
     */
    private final DerivedKeys master_keys;

    /**
     * Map containing the keys for every user.
     */
    private Map<String, DerivedKeys> user_keys;

    /**
     *  Your variable declarations (if any) can go here:
     */

    /**
     *  Constructor.
     *
     *  @param port_nb The number of the port to listen on.
     *  @param master_pwd The password shared with the provider.
     *  @param encrypted_users_file The name of the encrypted password file.
     */
    public AuthorityServer(
        int port_nb, String master_pwd, String encrypted_users_file
    ) throws ClassNotFoundException, InvalidAlgorithmParameterException,
             InvalidKeyException, InvalidKeySpecException, IOException,
             NoSuchAlgorithmException, NoSuchPaddingException,
             NumberFormatException, SignatureException
    {
        // Opens a socket for incoming connections
        this.server_socket = new ServerSocket(port_nb);

        // Derives the keys from the master password.
        this.master_keys = new DerivedKeys(master_pwd);

        this.loadUserKeys(encrypted_users_file);
    }

    public void listen() throws IOException
    {
        // Waits for clients
        for (;;) {
            Socket client_socket = server_socket.accept();

            System.out.println("Client connected: ");
            System.out.println(client_socket.getInetAddress().toString());
            System.out.println();

            // Spawns new thread to handle the client request.
            new AuthorityServerThread(
                client_socket, this.master_keys, this.user_keys
            ).start();
        }
    }

    /**
     * Deciphers and reads the entire user database using the master password.
     * Checks that the file has been generated by the provider by checking the
     * signature.
     * Stores the user derives keys in this.user_keys.
     * The input file only contains the derived keys, it doesn't contain any
     * password. This the AuthorityServer has never acces to any user plain text
     * password.
     */
    private void loadUserKeys(String encrypted_users_file)
        throws ClassNotFoundException, InvalidAlgorithmParameterException,
               InvalidKeyException, IOException, NoSuchAlgorithmException,
               NoSuchPaddingException, SignatureException
    {
        // Reads the encrypted Map from the file.
        FileInputStream   file  = new FileInputStream(encrypted_users_file);
        ObjectInputStream input = new ObjectInputStream(file);
        SecretData<TreeMap<String, DerivedKeys>> encrypted_map =
            (SecretData<TreeMap<String, DerivedKeys>>) input.readObject();

        // Checks and decipher the encrypted map.
        this.user_keys = encrypted_map.getPlaintext(this.master_keys);

        file.close();
    }

    protected void finalize()
    {
        // Close the socket
        try {
            server_socket.close();
        } catch(IOException iox) {
            System.out.println(iox.getMessage());
            iox.printStackTrace();
        }
    }

    /**
     *  Print the usage of this program on the standard output.
     */
    public static void printUsage()
    {
        System.out.print("Usage: ");
        System.out.println("AuthorityServer -m <master_pwd> -p <port> -f <pwds>");
        System.out.println();
        System.out.println("  -m\tPassword shared with the provider");
        System.out.println("  -p\tPort number to listen on");
        System.out.println("  -f\tName of the encrypted file containing the pairs <user,pwd>");
    }

    public static void main(String[] args)
        throws ClassNotFoundException, InvalidAlgorithmParameterException,
               InvalidKeyException, InvalidKeySpecException, IOException,
               NoSuchAlgorithmException, NoSuchPaddingException,
               NumberFormatException, SignatureException
    {
        // Check the number of arguments.
        if (args.length != 6) {
            printUsage();
            System.exit(-1);
        }

        // File containing the encrypted pairs <user,pwd>
        String pwds_file = null;

        // Password shared with the authority server.
        String master_pwd = null;

        // Port number to listen on.
        String port_nb = null;

        // Get the arguments.
        for (int i = 0; i < args.length; i+=2) {
            if ((args[i].equals("-m")) && (master_pwd == null))
                master_pwd = args[i + 1];
            else if ((args[i].equals("-p")) && (port_nb == null))
                port_nb = args[i + 1];
            else if ((args[i].equals("-f")) && (pwds_file == null))
                pwds_file = args[i + 1];
            else {
                printUsage();
                System.exit(-1);
            }
        }

        // Create and run the server.
        new AuthorityServer(
            Integer.parseInt(port_nb), master_pwd, pwds_file
        ).listen();
    }
}
